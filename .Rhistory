Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
library(Rcpp)
Rcpp::sourceCpp('cpp/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
library(Rcpp)
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
Rcpp::sourceCpp('~/ListOf.cpp')
library(Rcpp)
library(microbenchmark)
vectorized <- function() {
a <- c(1, 1)
b <- c(2, 2)
for (i in 1:1000000) {
x <- a + b
}
return()
}
devectorized <- function() {
a <- c(1, 1)
b <- c(2, 2)
for (i in 1:1000000) {
for (index in 1:2) {
x[index] <- a[index] + b[index]
}
}
return()
}
cppFunction('
void rcpp_devectorised() {
NumericVector a = NumericVector::create(1, 1);
NumericVector b = NumericVector::create(2, 2);
NumericVector x(2);
for (int j = 0; j < 1e6; ++j) {
for (int i = 0; i < 2; ++i) {
x[i] = a[i] + b[i];
}
}
}
')
cppFunction('
void rcpp_vectorised() {
NumericVector a = NumericVector::create(1, 1);
NumericVector b = NumericVector::create(2, 2);
NumericVector x = no_init(2);
for (int j = 0; j < 1e6; ++j) {
x = a + b;
}
}
')
system.time(vectorized())
#  user  system elapsed
# 0.526   0.006   0.532
system.time(devectorized())
#  user  system elapsed
# 8.511   0.012   8.520
microbenchmark(
rcpp_vectorised(),
rcpp_devectorised(),
unit = "s")
library(Rcpp)
library(microbenchmark)
vectorized <- function() {
a <- c(1, 1)
b <- c(2, 2)
for (i in 1:1000000) {
x <- a + b
}
return()
}
devectorized <- function() {
a <- c(1, 1)
b <- c(2, 2)
for (i in 1:1000000) {
for (index in 1:2) {
x[index] <- a[index] + b[index]
}
}
return()
}
cppFunction('
void rcpp_devectorised() {
NumericVector a = NumericVector::create(1, 1);
NumericVector b = NumericVector::create(2, 2);
NumericVector x = no_init(2);
for (int j = 0; j < 1e6; ++j) {
for (int i = 0; i < 2; ++i) {
x[i] = a[i] + b[i];
}
}
}
')
cppFunction('
void rcpp_vectorised() {
NumericVector a = NumericVector::create(1, 1);
NumericVector b = NumericVector::create(2, 2);
NumericVector x = no_init(2);
for (int j = 0; j < 1e6; ++j) {
x = a + b;
}
}
')
system.time(vectorized())
#  user  system elapsed
# 0.526   0.006   0.532
system.time(devectorized())
#  user  system elapsed
# 8.511   0.012   8.520
microbenchmark(
rcpp_vectorised(),
rcpp_devectorised(),
unit = "s")
system.time(vectorized())
system.time(devectorized())
library(Rcpp)
library(microbenchmark)
vectorized <- function() {
a <- c(1, 1)
b <- c(2, 2)
for (i in 1:1000000) {
x <- a + b
}
return()
}
devectorized <- function() {
x <- numeric(2)
a <- c(1, 1)
b <- c(2, 2)
for (i in 1:1000000) {
for (index in 1:2) {
x[index] <- a[index] + b[index]
}
}
return()
}
cppFunction('
void rcpp_devectorised() {
NumericVector a = NumericVector::create(1, 1);
NumericVector b = NumericVector::create(2, 2);
NumericVector x = no_init(2);
for (int j = 0; j < 1e6; ++j) {
for (int i = 0; i < 2; ++i) {
x[i] = a[i] + b[i];
}
}
}
')
cppFunction('
void rcpp_vectorised() {
NumericVector a = NumericVector::create(1, 1);
NumericVector b = NumericVector::create(2, 2);
NumericVector x = no_init(2);
for (int j = 0; j < 1e6; ++j) {
x = a + b;
}
}
')
system.time(vectorized())
#  user  system elapsed
# 0.526   0.006   0.532
system.time(devectorized())
#  user  system elapsed
# 8.511   0.012   8.520
microbenchmark(
rcpp_vectorised(),
rcpp_devectorised(),
unit = "s")
library(Rcpp)
library(microbenchmark)
vectorized <- function() {
a <- c(1, 1)
b <- c(2, 2)
for (i in 1:1000000) {
x <- a + b
}
return()
}
devectorized <- function() {
x <- numeric(2)
a <- c(1, 1)
b <- c(2, 2)
for (i in 1:1000000) {
for (index in 1:2) {
x[index] <- a[index] + b[index]
}
}
return()
}
cppFunction('
void rcpp_devectorised() {
NumericVector a = NumericVector::create(1, 1);
NumericVector b = NumericVector::create(2, 2);
NumericVector x = no_init(2);
for (int j = 0; j < 1e6; ++j) {
for (int i = 0; i < 2; ++i) {
x[i] = a[i] + b[i];
}
}
}
')
cppFunction('
void rcpp_vectorised() {
NumericVector a = NumericVector::create(1, 1);
NumericVector b = NumericVector::create(2, 2);
NumericVector x = no_init(2);
for (int j = 0; j < 1e6; ++j) {
x = a + b;
}
}
')
cppFunction('
void rcpp_devectorised(NumericVector a, NumericVector b) {
NumericVector x = no_init(2);
for (int j = 0; j < 1e6; ++j) {
for (int i = 0; i < 2; ++i) {
x[i] = a[i] + b[i];
}
}
}
')
devectorized(1:5, 1:5)
rcpp_devectorised(1:5, 1:5)
library(Rcpp)
system("grep VECTOR -r *")
system("grep ' VECTOR' -r *")
library(Rcpp)
system("grep 'matrix' -r *")
setwd("inst/include")
system("grep 'matrix' -r *")
system("grep get__ -r *")
system("grep Storage -r *")
system("grep 'typedef.*Storage' -r *")
library(Rcpp)
system("grep VECTOR:: -r *")
system("grep STORAGE:: -r *")
system("grep Storage:: -r *")
system("grep VECTOR:: -r *")
library(Rcpp)
system("grep VECTOR::set -r *")
system("grep VECTOR::get -r *")
library(Rcpp)
system("grep Rcpp_ReplaceObject -r *")
library(Rcpp)
system("grep init -r *")
system("grep ::init -r *")
setwd("inst/include/")
system("grep init -r *")
file.edit("~/.R/Makevars")
library(Rcpp)
library(Rcpp)
system("grep RCPP_DEBUG -r *")
library(Rcpp)
system("grep '#define DEMANGLE' -r *")
library(Rcpp)
library(Rcpp)
library(Rcpp)
system("grep demangle -r *")
library(Rcpp)
library(Rcpp)
library(Rcpp)
library(Rcpp)
library(Rcpp)
Rcpp::sourceCpp('~/test.cpp')
library(Rcpp)
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
library(Rcpp)
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
Rcpp::sourceCpp('~/test.cpp')
library(Rcpp)
Rcpp::sourceCpp('~/test.cpp')
system("grep copy__ -r *")
system("grep set__ -r *")
library(Rcpp)
Rcpp::sourceCpp('~/test.cpp')
library(RUnit)
setwd("inst/unitTests/")
runTestFile("runit.Matrix.R")
system("grep RCPP_GENERATE_CTOR -r *")
setwd("../")
system("grep RCPP_GENERATE_CTOR -r *")
library(Rcpp)
system("grep '::slot' -r *")
system("grep 'slot' -r *")
library(Rcpp)
library(Rcpp)
system("grep 'slot' -r *")
system("grep '\\,slot' -r *")
system("grep '\\,slot' -r *")
system("grep '\\.slot' -r *")
system("grep 'slot' -r *")
library(Rcpp)
library(Rcpp)
system("grep 'S4("' -r *")
system("grep 'S4(\"' -r *")
library(Rcpp)
library(Rcpp)
system("grep RCPP_GENERATE_CTOR -r *")
library(Rcpp)
system("find . -name '*proxy*' -r *")
system("find . -name '*proxy*'")
file.edit("include/Rcpp/proxy/proxy.h")
library(Rcpp)
library(Rcpp)
list.files(pattern="S4")
list.files(pattern="S4", r=t)
list.files(pattern="S4", r=T)
system("grep #include.*S4 -r *")
system("grep '#include.*S4' -r *")
quit()
file.edit("~/.R/Makevars")
.Rprofile
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -O3 -march=native -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -O3 -march=native -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -O3 -Wall",
FFLAGS="${FCFLAGS}",
)
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -O3 -march=native -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -O3 -march=native -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -O3 -Wall",
FFLAGS="${FCFLAGS}"
)
text <- paste( names(Makevars), makevars, sep=" = ", collapse="\n" )
text <- paste( names(Makevars), unlist(Makevars), sep=" = ", collapse="\n" )
text
## get the Makevars for debug installation of R
if (grepl("debug", Sys.getenv("R_HOME"), ignore.case=TRUE)) {
Sys.setenv("R_USE_DEBUG_MAKEVARS"=1)
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -Wall",
FFLAGS="${FCFLAGS}"
)
} else {
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -O3 -march=native -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -O3 -march=native -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -O3 -Wall",
FFLAGS="${FCFLAGS}"
)
}
write_makevars <- function(Makevars) {
text <- paste(
"## Generated by .Rprofile scripts",
names(Makevars), unlist(Makevars), sep=" = ", collapse="\n"
)
cat(text, file="~/.R/Makevars")
}
write_makevars(Makevars)
rm(write_makevars)
readLines("~/.R/Makevars")
## get the Makevars for debug installation of R
if (grepl("debug", Sys.getenv("R_HOME"), ignore.case=TRUE)) {
Sys.setenv("R_USE_DEBUG_MAKEVARS"=1)
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -Wall",
FFLAGS="${FCFLAGS}"
)
} else {
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -O3 -march=native -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -O3 -march=native -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -O3 -Wall",
FFLAGS="${FCFLAGS}"
)
}
write_makevars <- function(Makevars) {
text <- paste(
names(Makevars), unlist(Makevars), sep=" = ", collapse="\n"
)
cat(c("## Generated by .Rprofile\n", text, "\n", file="~/.R/Makevars")
}
write_makevars(Makevars)
rm(write_makevars)
## get the Makevars for debug installation of R
if (grepl("debug", Sys.getenv("R_HOME"), ignore.case=TRUE)) {
Sys.setenv("R_USE_DEBUG_MAKEVARS"=1)
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -Wall",
FFLAGS="${FCFLAGS}"
)
} else {
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -O3 -march=native -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -O3 -march=native -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -O3 -Wall",
FFLAGS="${FCFLAGS}"
)
}
write_makevars <- function(Makevars) {
text <- paste(
names(Makevars), unlist(Makevars), sep=" = ", collapse="\n"
)
cat(c("## Generated by .Rprofile\n", text, "\n"), file="~/.R/Makevars")
}
write_makevars(Makevars)
rm(write_makevars)
readLines("~/.R/Makevars")
if (grepl("debug", Sys.getenv("R_HOME"), ignore.case=TRUE)) {
Sys.setenv("R_USE_DEBUG_MAKEVARS"=1)
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -Wall",
FFLAGS="${FCFLAGS}"
)
} else {
Makevars <- list(
CC="clang",
CXX="clang++",
CFLAGS="-g -O3 -march=native -pipe -std=gnu99 -Wall -pedantic",
CXXFLAGS="-g -O3 -march=native -pipe -Wall -pedantic -ftemplate-depth=999",
FCFLAGS="-g -O3 -Wall",
FFLAGS="${FCFLAGS}"
)
}
write_makevars <- function(Makevars) {
text <- paste(
names(Makevars), unlist(Makevars), sep=" = ", collapse="\n"
)
cat(c("## Generated by .Rprofile\n", text, "\n"), file="~/.R/Makevars", sep="")
}
write_makevars(Makevars)
rm(write_makevars)
readLines("~/.R/Makevars")
cat( readLines("~/.R/Makevars") )
cat( readLines("~/.R/Makevars"), sep="\n" )
quit()
?Startup
library(Rcpp)
system("grep string_const_name_proxy -r *")
library(Rcpp)
system("grep simple_name_proxy -r *")
library(Rcpp)
library(Rcpp)
setClass("foo", x="matrix")
setClass("foo", list(x="matrix"))
setClass("Foo", list(x="matrix"))
foo <- new("Foo", matrix( rnorm(4), nrow=2 ))
setClass("Foo", list(x="matrix"))
foo <- new("Foo", matrix( rnorm(4), nrow=2 ))
foo <- new("Foo", x=matrix( rnorm(4), nrow=2 ))
foo
system("grep RCPP_CTOR_ASSIGN -r *")
library(Rcpp)
system('grep proxy.*operator= -r *')
system("grep Shield -r *")
system("find . -name '*Shield*'")
system("find . -name '*shield*'")
